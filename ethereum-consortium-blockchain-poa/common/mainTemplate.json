{
	"$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"location": {
			"type": "string",
			"defaultValue": "redmond",
			"metadata": {
				"description": "Resource group location for current deployment"
			}
		},
		"isJoiningExistingNetwork": {
			"type": "bool",
			"defaultValue": false,
			"metadata": {
				"description": "Will this deployment be joining an existing ethereum network?"
			}
		},
		"regionCount": {
			"type": "int",
			"defaultValue": 1,
			"allowedValues": [
				1,
				2,
				3,
				4,
				5
			],
			"metadata": {
				"description": "Select the number of region(s) to deploy virtual machines into."
			}
		},
		"location_1": {
			"type": "string",
			"defaultValue": "redmond",
			"metadata": {
				"description": "Select the first region."
			}
		},
		"location_2": {
			"type": "string",
			"defaultValue": "eastus2",
			"metadata": {
				"description": "Select the second region."
			}
		},
		"location_3": {
			"type": "string",
			"defaultValue": "centralus",
			"metadata": {
				"description": "Select the third region."
			}
		},
		"location_4": {
			"type": "string",
			"defaultValue": "eastus",
			"metadata": {
				"description": "Select the fourth region."
			}
		},
		"location_5": {
			"type": "string",
			"defaultValue": "westus",
			"metadata": {
				"description": "Select the fifth region."
			}
		},
		"authType": {
			"type": "string",
			"defaultValue": "password",
			"allowedValues": [
				"password",
				"sshPublicKey"
			],
			"metadata": {
				"description": "Authorization type for SSH access to VMs"
			}
		},
		"adminUsername": {
			"type": "string",
			"defaultValue": "adminuser",
			"metadata": {
				"description": "Administrator username of each deployed VM (alphanumeric characters only)"
			}
		},
		"adminPassword": {
			"type": "securestring",
			"defaultValue": "",
			"metadata": {
				"description": "Administrator password for each deployed VM"
			}
		},
		"adminSSHKey": {
			"type": "string",
			"defaultValue": "",
			"metadata": {
				"description": "SSH RSA public key file as a string"
			}
		},
		"ethereumNetworkID": {
			"type": "int",
			"defaultValue": 10101010,
			"metadata": {
				"description": "Private Ethereum network ID to which to connect (max 9 digit number)"
			},
			"maxValue": 2147483647
		},
		"consortiumMemberId": {
			"type": "int",
			"minValue": 0,
			"maxValue": 255,
			"defaultValue": 0,
			"metadata": {
				"description": "Unique Identifier for the current member of this consortium."
			}
		},
		"ethereumAdminPublicKey": {
			"type": "string",
			"minLength": 42,
			"maxLength": 42,
			"defaultValue": "0x0000000000000000000000000000000000000001",
			"metadata": {
				"description": "Ethereum account address that is used for participating in PoA member management"				
			}
		},
		"deployUsingPublicIP":{
			"type": "bool",
			"defaultValue": true,
			"metadata": {
				"description": "Deploy using Public IP space or behind Vnet Gateway"
			}
		},
		"numVLNodesRegion": {
			"type": "int",
			"defaultValue": 2,
			"metadata": {
				"description": "Number of load balanced validator nodes"
			},
			"allowedValues": [
				2,
				3,
				4,
				5,
				6,
				7,
				8,
				9,
				10,
				11,
				12,
				13,
				14,
				15
			],
			"minValue": 2,
			"maxValue": 15
		},
		"vlNodeVMSize": {
			"type": "string",
			"defaultValue": "Standard_D1_v2",
			"metadata": {
				"description": "Size of the virtual machine for transaction nodes"
			}
		},
		"vlStorageAccountType": {
			"type": "string",
			"defaultValue": "",
			"allowedValues": [
				"Standard_LRS",
				"Premium_LRS"
			],
			"metadata": {
				"description": "Type of managed disks to create"
			}
		},
		"connectionSharedKey": {
			"type": "string",
			"defaultValue": "",
			"metadata": {
				"description": "Shared Key for the Gateway Connection"
			}
		},
		"consortiumMemberGatewayId": {
			"type": "string",
			"defaultValue": "",
			"metadata": {
				"description": "The ResourceId of the Consortium Member VNet Gateawy to which to connect to"
			}
		},
		"consortiumDataURL": {
			"type": "string",
			"defaultValue": "",
			"metadata": {
				"description": "The URL pointing to the consortium configuration data provided by another member's deployment"
			}
		},		
		"transactionPermissioningContract": {
			"type": "string",
			"defaultValue": "",
			"metadata": {
				"description": "Bytecode for the permissioning contract"
			}
		},
		"publicRPCEndpoint": {
			"type": "bool",
			"defaultValue": true,
			"metadata": {
				"description": "Should RPC endpoint be exposed over public IP?"
			}
		},
		"baseUrl": {
			"type": "string",
			"metadata": {
				"description": "The base URL for dependent assets",
				"artifactsBaseUrl": ""
			},
			"defaultValue": "https://raw.githubusercontent.com/azure/AzureStack-QuickStart-Templates/master/ethereum-consortium-blockchain-poa/common"
		},
		"omsDeploy": {
			"type": "bool",
			"defaultValue": false
		},
		"msiDeploy": {
			"type": "bool",
			"defaultValue": false
		},
		"omsWorkspaceId": {
			"type": "string",
			"defaultValue": ""
		},
		"omsPrimaryKey": {
			"type": "string",
			"defaultValue": ""
		},
		"omsLocation": {
			"type": "string",
			"defaultValue": "eastus",
			"metadata": {
				"description": "Select region to deploy the Log Analytics instance"
			},
			"allowedValues": [
				"eastus",
				"westcentralus",
				"canadacentral",
				"westeurope",
				"uksouth",
				"southeastasia",
				"australiasoutheast",
				"centralindia",
				"japaneast",
				"usgovvirginia"
			]
		},
		"emailAddress": {
			"type": "string",
			"defaultValue": "",
			"metadata": {
				"description": "Email for deployment notification"
			}
		},
		"enableSshAccess":
		{
			"type": "bool",
			"defaultValue": true,
			"metadata": {
				"description": "Enables or Disables the Network Security Group rule to allow SSH port access"
			}
		},
		"servicePrincipalId": 
		{
			"type": "string",
			"defaultValue": "454c6c39-2ff0-4342-8ed5-8450af307701",
			"metadata": {
				"description": "Optional - Service principal ID for environments that do not support MSI."
			}
		},
		"servicePrincipalSecret": 
		{
			"type": "string",
			"defaultValue": "sJIJGsiO+nO3FLDN76FFEMluGRaB3dqSRODKFtmhHgI=",
			"metadata": {
				"description": "Optional - Service principal secret for environments that do not support MSI."
			}
		},
		"endpointFqdn": 
		{
			"type": "string",
			"defaultValue": "redmond.ext-n22r1002.masd.stbtest.microsoft.com",
			"metadata": {
				"description": "The FQDN of the Azure Stack environemt. (e.g. local.azurestack.external)."
			}
		},
		"tenantId": 
		{
			"type": "string",
			"defaultValue": "73103a66-894e-4622-8ca7-da73c5c00c0b",
			"metadata": {
				"description": "The name or ID or the AAD tenant. (e.g. mydomain.onmicrosoft.com)."
			}
		},
		"dockerRepository": 
		{
			"type": "string",
			"defaultValue": "blockchainazurestack.azurecr.io",
			"metadata": {
				"description": "Docker repository"
			}
		},
		"dockerLogin": 
		{
			"type": "string",
			"defaultValue": "blockchainazurestack",
			"metadata": {
				"description": "Docker user name"
			}
		},
		"dockerPassword": 
		{
			"type": "string",
			"defaultValue": "37xdgrQJbLdnbYh9W=Y7xsidIIRzeGZU",
			"metadata": {
				"description": "Docker password"
			}
		},
		"dockerImagePoaOrchestrator": 
		{
			"type": "string",
			"defaultValue": "orchestrator:latest18",
			"metadata": {
				"description": "Docker Orchestrator repository"
			}
		},
		"dockerImageEtheradmin": 
		{
			"type": "string",
			"defaultValue": "etheradmin:latest18",
			"metadata": {
				"description": "Docker EtherAdmin repository"
			}
		},
		"dockerImageEthstat": 
		{
			"type": "string",
			"defaultValue": "ethstat:latest18",
			"metadata": {
				"description": "Docker Ethstat repository"
			}
		},
		"dockerImageValidator": 
		{
			"type": "string",
			"defaultValue": "validator:latest18",
			"metadata": {
				"description": "Docker Validator repository"
			}
		}
	},
	"variables": {
		"baseUrl": "[parameters('baseUrl')]",
		"accessType": "[if(parameters('msiDeploy'), 'MSI', 'SPN')]",
		"deploymentMode": "[if(parameters('isJoiningExistingNetwork'),'Member', 'Leader')]",
		"deploymentGuid": "[if(parameters('isJoiningExistingNetwork'),'pid-fff6cb36-716f-46e8-bd34-10b25aabce22', 'pid-a5842b51-d2c6-486a-82e7-2bc2257ff545')]",
		"poaScriptUrl": "[uri(variables('baseUrl'),'scripts/configure-poa.sh')]",
		"poaScriptFilename": "configure-poa.sh",
		"notificationScriptUrl": "[uri(variables('baseUrl'),'scripts/trigger-deployment-email.sh')]",
		"notificationScriptUrl": "[uri(variables('baseUrl'),'scripts/trigger-deployment-email.sh')]",
		"notificationFilename": "trigger-deployment-email.sh",
		"namePrefix": "eth",
		"namingInfix": "[toLower(take(concat(variables('namePrefix'),uniqueString(resourceGroup().id),parameters('location')), 9))]",
		"maxPeers": 30,
		"httpPort": 80,
		"adminSitePort": 3000,
		"sshPort": 22,
		"sshNATFrontEndStartingPort": 4000,
		"sshNATFrontEndEndingPort": 4050,
		"ethRpcPort": 8540,
		"ethNetworkPort": 30300,
		"dockerRepository": "[parameters('dockerRepository')]",
        "dockerLogin": "[parameters('dockerLogin')]",
        "dockerPassword": "[parameters('dockerPassword')]",
		"dockerImagePoaOrchestrator": "[parameters('dockerImagePoaOrchestrator')]",
		"dockerImageEtheradmin": "[parameters('dockerImageEtheradmin')]",
		"dockerImageEthstat": "[parameters('dockerImageEthstat')]",
		"dockerImageValidator": "[parameters('dockerImageValidator')]",
		"linkedUrls": {
			"vmssSetupUrl": "[uri(variables('baseUrl'),concat('nested/vmss-', if(parameters('msiDeploy'), 'with', 'without'), 'Extension.json'))]",
			"vmssConfigUrl": "[uri(variables('baseUrl'),'nested/vmss-config.json')]",
			"vmssNotificationUrl": "[uri(variables('baseUrl'),'nested/vmss-notification.json')]",
			"connectionsSetupUrl": "[uri(variables('baseUrl'),'nested/connections.json')]",
			"networkResourcesUrl": "[uri(variables('baseUrl'),'nested/network-resources.json')]",
			"loadBalancerUrl": "[uri(variables('baseUrl'),'nested/network-resources.loadBalancer.json')]",
			"vnetgatewayUrl": "[uri(variables('baseUrl'),'nested/vnet-gateway.json')]",
			"omsDeployUrl": "[uri(variables('baseUrl'),concat('nested/oms-', if(and(parameters('omsDeploy'), empty(parameters('omsWorkspaceId'))), 'DeployNew', 'Existing'), '.json'))]",
			"keyVaultDeployUrl": "[uri(variables('baseUrl'),'nested/createKeyVault.json')]",
			"storageDeployUrl": "[uri(variables('baseUrl'),'nested/storage.json')]"
		},
		"vnetName": "[concat(variables('namingInfix'), '-vnet')]",
		"vlSubnetName": "snet-vl",
		"vlNsgName": "[concat(variables('namingInfix'), '-vlNsg')]",
		"mustDeployVnetGateway": "[not(parameters('deployUsingPublicIP'))]",
		"numSubnets": "[if(variables('mustDeployVnetGateway'), 2, 1)]",
		"lbSettings": {
			"lbPublicIPAddressName": "[concat(variables('namingInfix'), '-lbpip')]",
			"publicIPAllocationMethod": "Dynamic",
			"dnsHostName": "[concat(variables('namingInfix'), '-dns')]",
			"loadBalancerName": "[concat(variables('namingInfix'), '-vlLb')]",
			"lbFrontEndIpConfigName": "LBFrontEnd",
			"backendAddressPoolName": "LBBackendPool",
			"FrontendPort1": "[variables('httpPort')]",
			"BackendPort1": "[variables('adminSitePort')]",
			"FrontendPort2": "[variables('ethRpcPort')]",
			"BackendPort2": "[variables('ethRpcPort')]",
			"inboundNATRuleNamePrefix": "SSH-vlVM",
			"inboundNATRuleFrontendStartingPort": "[variables('sshNATFrontEndStartingPort')]",
			"inboundNATRuleFrontendEndingPort": "[variables('sshNATFrontEndEndingPort')]",
			"inboundNATRuleBackendPort": "[variables('sshPort')]"
		},
		"gatewaySettings": {
			"gatewayPublicIPName": "[concat(variables('namingInfix'), '-gate-pip')]",
			"gatewayName": "[concat(variables('namingInfix'),'-gateway')]",
			"gatewaySubnetName": "GatewaySubnet",
			"gatewaySku": "Standard",
			"mustDeployVnetGateway": "[variables('mustDeployVnetGateway')]"
		},
		"ubuntuImage": {
			"publisher": "Canonical",
			"offer": "UbuntuServer",
			"sku": "16.04-LTS",
			"version": "latest"
		},
		"keyVaultSettings": {
			"name": "[concat(variables('namingInfix'),'-akv')]"
		},
		"storageSettings": {
			"name": "[concat(variables('namingInfix'),'store')]"
		},
		"authenticationSettings": {
			"adminUsername": "[parameters('adminUsername')]",
			"adminPassword": "[parameters('adminPassword')]",
			"sshPublicKey": "[parameters('adminSSHKey')]",
			"authenticationType": "[parameters('authType')]",
			"adminId": "[parameters('ethereumAdminPublicKey')]",
			"accessType": "[variables('accessType')]",
			"servicePrincipalId": "[parameters('servicePrincipalId')]",
			"servicePrincipalSecret": "[parameters('servicePrincipalSecret')]",
			"endpointFqdn": "[parameters('endpointFqdn')]",
			"tenantId": "[parameters('tenantId')]"
		},
		"vlVmssSettings": {
			"vmssName": "[concat('vl-', variables('namingInfix'))]",
			"vlCapacity": "[parameters('numVLNodesRegion')]",
			"nicName": "vl-nic",
			"storageAccountType": "[parameters('vlStorageAccountType')]",
			"nodeVMSize": "[parameters('vlNodeVMSize')]",
			"ipConfigName": "vl-ipconfig",
			"subnetName": "[variables('vlSubnetName')]",
			"internalDnsName": "[concat('vl-idns-',variables('namingInfix'))]",
			"loadBalancerName": "[variables('lbSettings').loadBalancerName]",
			"loadBalancerBackendAddressPoolName": "[variables('lbSettings').backendAddressPoolName]",
			"loadBalancerInboundNatRuleNamePrefix": "[variables('lbSettings').inboundNATRuleNamePrefix]"
		},
		"extensionSettings": {
			"artifactsLocationURL": "[variables('baseUrl')]",
			"ethereumNetworkID": "[parameters('ethereumNetworkID')]",
			"maxPeers": "[variables('maxPeers')]",
			"ethNetworkPort": "[variables('ethNetworkPort')]",
			"numBootNodes": "[if(lessOrEquals(mul(parameters('numVLNodesRegion'), parameters('regionCount')),2),1,2)]",
			"numVLNodes": "[mul(parameters('numVLNodesRegion'), parameters('regionCount'))]",
			"vlVMNamePrefix": "vl",
			"adminSitePort": "[variables('adminSitePort')]",
			"consortiumId": "[parameters('consortiumMemberId')]"
		},
		"connectionSettings": {
			"connectionName": "conn",
			"gatewayName": "[variables('gatewaySettings').gatewayName]",
			"connectionSharedKey": "[parameters('connectionSharedKey')]",
			"regionCount": "[parameters('regionCount')]",
			"connectionMemName": "conn-to-other-gateway"
		},
		"vnetSettings": [
			{
				"vnetName": "[concat(variables('vnetName'),'-',variables('suffixArray')[0])]",
				"vlSubnetName": "[variables('vlSubnetName')]",
				"addressSpacePrefix": "[replace('10._.16.0/20','_',string(parameters('consortiumMemberId')))]",
				"loadBalancerPrivateIP": "[replace('10._.17.9','_',string(parameters('consortiumMemberId')))]",
				"numSubnets": "[variables('numSubnets')]",
				"vlNsgName": "[concat(variables('vlNsgName'),'-',variables('suffixArray')[0])]",
				"gatewayAsn": "[add(mul(parameters('consortiumMemberId'), 5),65000)]",
				"subnetPropertiesArray": [
					{
						"name": "[variables('vlSubnetName')]",
						"properties": {
							"addressPrefix": "[replace('10._.17.0/24','_',string(parameters('consortiumMemberId')))]",
							"networkSecurityGroup": {
								"id": "[resourceId('Microsoft.Network/networkSecurityGroups', concat(variables('vlNsgName'),'-',variables('suffixArray')[0]))]"
							}
						}
					},
					{
						"name": "GatewaySubnet",
						"properties": {
							"addressPrefix": "[replace('10._.19.0/24','_',string(parameters('consortiumMemberId')))]"
						}
					}
				]
			},
			{
				"vnetName": "[concat(variables('vnetName'),'-',variables('suffixArray')[1])]",
				"vlSubnetName": "[variables('vlSubnetName')]",
				"addressSpacePrefix": "[replace('10._.32.0/20','_',string(parameters('consortiumMemberId')))]",
				"loadBalancerPrivateIP": "[replace('10._.33.9','_',string(parameters('consortiumMemberId')))]",
				"numSubnets": "[variables('numSubnets')]",
				"vlNsgName": "[concat(variables('vlNsgName'),'-',variables('suffixArray')[1])]",
				"gatewayAsn": "[add(mul(parameters('consortiumMemberId'), 5),65001)]",
				"subnetPropertiesArray": [
					{
						"name": "[variables('vlSubnetName')]",
						"properties": {
							"addressPrefix": "[replace('10._.33.0/24','_',string(parameters('consortiumMemberId')))]",
							"networkSecurityGroup": {
								"id": "[resourceId('Microsoft.Network/networkSecurityGroups', concat(variables('vlNsgName'),'-',variables('suffixArray')[1]))]"
							}
						}
					},
					{
						"name": "GatewaySubnet",
						"properties": {
							"addressPrefix": "[replace('10._.35.0/24','_',string(parameters('consortiumMemberId')))]"
						}
					}
				]
			},
			{
				"vnetName": "[concat(variables('vnetName'),'-',variables('suffixArray')[2])]",
				"vlSubnetName": "[variables('vlSubnetName')]",
				"addressSpacePrefix": "[replace('10._.48.0/20','_',string(parameters('consortiumMemberId')))]",
				"loadBalancerPrivateIP": "[replace('10._.49.9','_',string(parameters('consortiumMemberId')))]",
				"numSubnets": "[variables('numSubnets')]",
				"vlNsgName": "[concat(variables('vlNsgName'),'-',variables('suffixArray')[2])]",
				"gatewayAsn": "[add(mul(parameters('consortiumMemberId'), 5),65002)]",
				"subnetPropertiesArray": [
					{
						"name": "[variables('vlSubnetName')]",
						"properties": {
							"addressPrefix": "[replace('10._.49.0/24','_',string(parameters('consortiumMemberId')))]",
							"networkSecurityGroup": {
								"id": "[resourceId('Microsoft.Network/networkSecurityGroups', concat(variables('vlNsgName'),'-',variables('suffixArray')[2]))]"
							}
						}
					},
					{
						"name": "GatewaySubnet",
						"properties": {
							"addressPrefix": "[replace('10._.51.0/24','_',string(parameters('consortiumMemberId')))]"
						}
					}
				]
			},
			{
				"vnetName": "[concat(variables('vnetName'),'-',variables('suffixArray')[3])]",
				"vlSubnetName": "[variables('vlSubnetName')]",
				"addressSpacePrefix": "[replace('10._.64.0/20','_',string(parameters('consortiumMemberId')))]",
				"loadBalancerPrivateIP": "[replace('10._.65.9','_',string(parameters('consortiumMemberId')))]",
				"numSubnets": "[variables('numSubnets')]",
				"vlNsgName": "[concat(variables('vlNsgName'),'-',variables('suffixArray')[3])]",
				"gatewayAsn": "[add(mul(parameters('consortiumMemberId'), 5),65003)]",
				"subnetPropertiesArray": [
					{
						"name": "[variables('vlSubnetName')]",
						"properties": {
							"addressPrefix": "[replace('10._.65.0/24','_',string(parameters('consortiumMemberId')))]",
							"networkSecurityGroup": {
								"id": "[resourceId('Microsoft.Network/networkSecurityGroups', concat(variables('vlNsgName'),'-',variables('suffixArray')[3]))]"
							}
						}
					},
					{
						"name": "GatewaySubnet",
						"properties": {
							"addressPrefix": "[replace('10._.67.0/24','_',string(parameters('consortiumMemberId')))]"
						}
					}
				]
			},
			{
				"vnetName": "[concat(variables('vnetName'),'-',variables('suffixArray')[4])]",
				"vlSubnetName": "[variables('vlSubnetName')]",
				"addressSpacePrefix": "[replace('10._.80.0/20','_',string(parameters('consortiumMemberId')))]",
				"loadBalancerPrivateIP": "[replace('10._.81.9','_',string(parameters('consortiumMemberId')))]",
				"numSubnets": "[variables('numSubnets')]",
				"vlNsgName": "[concat(variables('vlNsgName'),'-',variables('suffixArray')[4])]",
				"gatewayAsn": "[add(mul(parameters('consortiumMemberId'), 5),65004)]",
				"subnetPropertiesArray": [
					{
						"name": "[variables('vlSubnetName')]",
						"properties": {
							"addressPrefix": "[replace('10._.81.0/24','_',string(parameters('consortiumMemberId')))]",
							"networkSecurityGroup": {
								"id": "[resourceId('Microsoft.Network/networkSecurityGroups', concat(variables('vlNsgName'),'-',variables('suffixArray')[4]))]"
							}
						}
					},
					{
						"name": "GatewaySubnet",
						"properties": {
							"addressPrefix": "[replace('10._.83.0/24','_',string(parameters('consortiumMemberId')))]"
						}
					}
				]
			}
		],
		"locationArray": [
			"[parameters('location_1')]",
			"[parameters('location_2')]",
			"[parameters('location_3')]",
			"[parameters('location_4')]",
			"[parameters('location_5')]"
		],
		"suffixArray": [
			"reg1",
			"reg2",
			"reg3",
			"reg4",
			"reg5"
		],
		"copy": [
			{
				"name": "vmssDeploymentNames",
				"count": "[parameters('regionCount')]",
				"input": {
					"name": "[concat('vmss-dep-',variables('suffixArray')[copyIndex('vmssDeploymentNames')])]"
				}
			}
		],
		"scriptReqVmss": 
			{
				"fileUri": "[variables('poaScriptUrl')]",
				"filename": "[variables('poaScriptFilename')]",
				"consortiumData": "[parameters('consortiumDataURL')]",
				"mode": "[variables('deploymentMode')]"
			},
		"scriptReqNotification": {
			"fileUri": "[variables('notificationScriptUrl')]",
			"filename": "[variables('notificationFilename')]"
		},
		"omsWorkspaceName": "[concat(variables('namingInfix'),'-oms')]",
		"sendEmailNotification": "[not(equals(parameters('emailAddress'), ''))]"
	},
	"resources": [
		{
			"apiVersion": "2018-02-01",
			"name": "[variables('deploymentGuid')]",
			"type": "Microsoft.Resources/deployments",
			"properties": {
				"mode": "Incremental",
				"template": {
					"$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
					"contentVersion": "1.0.0.0",
					"resources": []
				}
			}
		},
		{
			"apiVersion": "2018-02-01",
			"name": "keyVaultDeploy",
			"type": "Microsoft.Resources/deployments",
			"dependsOn": [
				"vmssDeployLoop"
			],
			"properties": {
				"mode": "Incremental",
				"templateLink": {
					"uri": "[variables('linkedUrls').keyVaultDeployUrl]",
					"contentVersion": "1.0.0.0"
				},
				"parameters": {
					"keyVaultName": {
						"value": "[variables('keyVaultSettings').name]"
					},
					"keyVaultLocation": {
						"value": "[parameters('location')]"
					},
					"settings": {
						"value": {
							"Copy": [
								{
									"name": "accessPolicies",
									"count": "[parameters('regionCount')]",
									"input": {
										"objectId": "[if(parameters('msiDeploy'), reference(variables('vmssDeploymentNames')[copyIndex('accessPolicies')].name).outputs.Result.value.vmssPrincipalId, parameters('servicePrincipalId'))]",
										"tenantId": "[subscription().tenantId]",
										"permissions": {
											"keys": [
												"All"
											],
											"secrets": [
												"All"
											]
										}
									}
								}
							]
						}
					}
				}
			}
		},
		{
			"apiVersion": "2018-02-01",
			"name": "deployOMS",
			"type": "Microsoft.Resources/deployments",
			"properties": {
				"mode": "Incremental",
				"templateLink": {
					"uri": "[variables('linkedUrls').omsDeployUrl]",
					"contentVersion": "1.0.0.0"
				},
				"parameters": {
					"workspaceName": {
						"value": "[variables('omsWorkspaceName')]"
					},
					"location": {
						"value": "[parameters('omsLocation')]"
					},
					"omsWorkspaceId": {
						"value": "[parameters('omsWorkspaceId')]"
					},
					"omsPrimaryKey": {
						"value": "[parameters('omsPrimaryKey')]"
					}
				}
			}
		},
		{
			"apiVersion": "2018-02-01",
			"name": "network-resources-deploy",
			"type": "Microsoft.Resources/deployments",
			"properties": {
				"mode": "Incremental",
				"templateLink": {
					"uri": "[variables('linkedUrls').networkResourcesUrl]",
					"contentVersion": "1.0.0.0"
				},
				"parameters": {
					"vnetSettings": {
						"value": "[variables('vnetSettings')]"
					},
					"regionCount": {
						"value": "[parameters('regionCount')]"
					},
					"locationArray": {
						"value": "[variables('locationArray')]"
					},
					"suffixArray": {
						"value": "[variables('suffixArray')]"
					},
					"mustDeployVnetGateway": {
						"value": "[variables('gatewaySettings').mustDeployVnetGateway]"
					},
					"numSubnets": {
						"value": "[variables('vnetSettings')[0].numSubnets]"
					},
					"publicRPCEndpoint": {
						"value": "[parameters('publicRPCEndpoint')]"
					},
					"lbPublicIPAddressName": {
						"value": "[variables('lbSettings').lbPublicIPAddressName]"
					},
					"publicIPAllocationMethod": {
						"value": "[variables('lbSettings').publicIPAllocationMethod]"
					},
					"dnsHostName": {
						"value": "[variables('lbSettings').dnsHostName]"
					},
					"loadBalancerName": {
						"value": "[variables('lbSettings').loadBalancerName]"
					},
					"lbFrontEndIpConfigName": {
						"value": "[variables('lbSettings').lbFrontEndIpConfigName]"
					},
					"backendAddressPoolName": {
						"value": "[variables('lbSettings').backendAddressPoolName]"
					},
					"FrontendPort1": {
						"value": "[variables('lbSettings').FrontendPort1]"
					},
					"BackendPort1": {
						"value": "[variables('lbSettings').BackendPort1]"
					},
					"FrontendPort2": {
						"value": "[variables('lbSettings').FrontendPort2]"
					},
					"BackendPort2": {
						"value": "[variables('lbSettings').BackendPort2]"
					},
					"gatewayPublicIPName": {
						"value": "[variables('gatewaySettings').gatewayPublicIPName]"
					},
					"inboundNATRuleNamePrefix": {
						"value": "[variables('lbSettings').inboundNATRuleNamePrefix]"
					},
					"inboundNATRuleFrontendStartingPort": {
						"value": "[variables('lbSettings').inboundNATRuleFrontendStartingPort]"
					},
					"inboundNATRuleFrontendEndingPort": {
						"value": "[variables('lbSettings').inboundNATRuleFrontendEndingPort]"
					},
					"inboundNATRuleBackendPort": {
						"value": "[variables('lbSettings').inboundNATRuleBackendPort]"
					},
					"ethNetworkPort":
					{
						"value": "[variables('ethNetworkPort')]"
					},
					"ethRpcPort": {
						"value": "[variables('ethRpcPort')]"
					},
					"loadBalancerUrl": {
						"value": "[variables('linkedUrls').loadBalancerUrl]"
					},
					"enableSshAccess":{
						"value": "[parameters('enableSshAccess')]"
					}
				}
			}
		},
		{
			"apiVersion": "2018-02-01",
			"name": "[variables('vmssDeploymentNames')[copyIndex()].name]",
			"type": "Microsoft.Resources/deployments",
			"dependsOn": [
				"network-resources-deploy"
			],
			"copy": {
				"name": "vmssDeployLoop",
				"count": "[parameters('regionCount')]"
			},
			"properties": {
				"mode": "Incremental",
				"templateLink": {
					"uri": "[variables('linkedUrls').vmssSetupUrl]",
					"contentVersion": "1.0.0.0"
				},
				"parameters": {
					"authenticationSettings": {
						"value": "[variables('authenticationSettings')]"
					},
					"vlVmssSettings": {
						"value": "[variables('vlVmssSettings')]"
					},
					"ubuntuImage": {
						"value": "[variables('ubuntuImage')]"
					},
					"location": {
						"value": "[variables('locationArray')[copyIndex()]]"
					},
					"suffix": {
						"value": "[variables('suffixArray')[copyIndex()]]"
					},
					"vnetName": {
						"value": "[variables('vnetSettings')[copyIndex()].vnetName]"
					},
					"omsWorkspaceId": {
						"value": "[reference('deployOMS').outputs.workspaceId.value]"
					},
					"omsPrimaryKey": {
						"value": "[reference('deployOMS').outputs.primarySharedKey.value]"
					},
					"mustDeployVnetGateway":{
						"value": "[variables('mustDeployVnetGateway')]"
					}
				}
			}
		},
		{
			"apiVersion": "2018-02-01",
			"name": "[concat(variables('vmssDeploymentNames')[copyIndex()].name, '-config')]",
			"type": "Microsoft.Resources/deployments",
			"dependsOn": [
				"vmssDeployLoop"
			],
			"copy": {
				"name": "vmssConfigLoop",
				"count": "[parameters('regionCount')]"
			},
			"properties": {
				"mode": "Incremental",
				"templateLink": {
					"uri": "[variables('linkedUrls').vmssConfigUrl]",
					"contentVersion": "1.0.0.0"
				},
				"parameters": {
					"authenticationSettings": {
						"value": "[variables('authenticationSettings')]"
					},
					"vlVmssSettings": {
						"value": "[variables('vlVmssSettings')]"
					},
					"extensionSettings": {
						"value": "[variables('extensionSettings')]"
					},
					"consortiumDataUrl": {
						"value": "[if(parameters('isJoiningExistingNetwork'), parameters('consortiumDataURL'), concat('http://',reference('network-resources-deploy').outputs.lbFqdnReg1.value))]"
					},
					"scriptReq": {
						"value": "[variables('scriptReqVmss')]"
					},
					"location": {
						"value": "[variables('locationArray')[copyIndex()]]"
					},
					"suffix": {
						"value": "[variables('suffixArray')[copyIndex()]]"
					},
					"omsWorkspaceId": {
						"value": "[reference('deployOMS').outputs.workspaceId.value]"
					},
					"omsPrimaryKey": {
						"value": "[reference('deployOMS').outputs.primarySharedKey.value]"
					},
					"keyVaultUrl": {
						"value": "[reference('keyVaultDeploy').outputs.KeyVaultUrl.value]"
					},
					"keyVaultName": {
						"value": "[variables('keyVaultSettings').name]"
					},
					"rgName": {
						"value": "[resourceGroup().name]"
					},
					"storageAccountName": {
						"value": "[reference('storageDeploy').outputs.StorageAccountName.value]"
					},
					"storagePrimaryKey": {
						"value": "[reference('storageDeploy').outputs.StoragePrimaryKey.value]"
					},
					"transactionPermissioningContract": {
						"value": "[parameters('transactionPermissioningContract')]"
					},
					"ethRpcPort": {
						"value": "[variables('ethRpcPort')]"
					},
					"dockerRepository": {
						"value": "[variables('dockerRepository')]"
					},
					"dockerLogin": {
						"value": "[variables('dockerLogin')]"
					},
					"dockerPassword": {
						"value": "[variables('dockerPassword')]"
					},
					"dockerImagePoaOrchestrator": {
						"value": "[variables('dockerImagePoaOrchestrator')]"
					},
					"dockerImageEtheradmin": {
						"value": "[variables('dockerImageEtheradmin')]"
					},
					"dockerImageEthstat": {
						"value": "[variables('dockerImageEthstat')]"
					},
					"dockerImageValidator": {
						"value": "[variables('dockerImageValidator')]"
					},
					"mustDeployVnetGateway":{
						"value": "[variables('mustDeployVnetGateway')]"
					}
				}
			}
		},
		{
			"apiVersion": "2018-02-01",
			"name": "vnet-gateway-deploy",
			"type": "Microsoft.Resources/deployments",
			"dependsOn": [
				"network-resources-deploy"
			],
			"properties": {
				"mode": "Incremental",
				"templateLink": {
					"uri": "[variables('linkedUrls').vnetgatewayUrl]",
					"contentVersion": "1.0.0.0"
				},
				"parameters": {
					"vnetSettings": {
						"value": "[variables('vnetSettings')]"
					},
					"regionCount": {
						"value": "[parameters('regionCount')]"
					},
					"locationArray": {
						"value": "[variables('locationArray')]"
					},
					"suffixArray": {
						"value": "[variables('suffixArray')]"
					},
					"gatewayPublicIPName": {
						"value": "[variables('gatewaySettings').gatewayPublicIPName]"
					},
					"gatewayName": {
						"value": "[variables('gatewaySettings').gatewayName]"
					},
					"gatewaySubnetName": {
						"value": "[variables('gatewaySettings').gatewaySubnetName]"
					},
					"gatewaySku": {
						"value": "[variables('gatewaySettings').gatewaySku]"
					},
					"mustDeployVnetGateway": {
						"value": "[variables('mustDeployVnetGateway')]"
					}
				}
			}
		},
		{
			"condition": "[and(variables('mustDeployVnetGateway'), greater(parameters('regionCount'),1))]",
			"apiVersion": "2018-02-01",
			"name": "connections-deploy",
			"type": "Microsoft.Resources/deployments",			
			"dependsOn": [
				"vnet-gateway-deploy"
			],
			"properties": {
				"mode": "Incremental",
				"templateLink": {
					"uri": "[variables('linkedUrls').connectionsSetupUrl]",
					"contentVersion": "1.0.0.0"
				},
				"parameters": {
					"connectionName": {
						"value": "[variables('connectionSettings').connectionName]"
					},
					"locationArray": {
						"value": "[variables('locationArray')]"
					},
					"suffixArray": {
						"value": "[variables('suffixArray')]"
					},
					"regionCount": {
						"value": "[variables('connectionSettings').regionCount]"
					},
					"connectionSharedKey": {
						"value": "[uniqueString(resourceGroup().id)]"
					},
					"gatewayName": {
						"value": "[variables('connectionSettings').gatewayName]"
					}
				}
			}
		},
		{
			"condition": "[and(parameters('isJoiningExistingNetwork'), variables('mustDeployVnetGateway'))]",
			"apiVersion": "2017-10-01",
			"type": "Microsoft.Network/connections",
			"dependsOn": [
				"vnet-gateway-deploy"
			],
			"name": "[concat(variables('connectionSettings').connectionMemName)]",
			"location": "[variables('locationArray')[0]]",
			"comments": "This is the VPN connection to a consortium member",
			"properties": {
				"virtualNetworkGateway1": {
					"id": "[resourceId('Microsoft.Network/virtualNetworkGateways',concat(variables('connectionSettings').gatewayName,'-',variables('suffixArray')[0]))]"
				},
				"virtualNetworkGateway2": {
					"id": "[parameters('consortiumMemberGatewayId')]"
				},
				"connectionType": "Vnet2Vnet",
				"sharedKey": "[parameters('connectionSharedKey')]",
				"routingWeight": 3,
				"enableBGP": true
			}
		},
		{
			"apiVersion": "2018-02-01",
			"name": "storageDeploy",
			"type": "Microsoft.Resources/deployments",
			"dependsOn": [],
			"properties": {
				"mode": "Incremental",
				"templateLink": {
					"uri": "[variables('linkedUrls').storageDeployUrl]",
					"contentVersion": "1.0.0.0"
				},
				"parameters": {
					"storageAccountName": {
						"value": "[variables('storageSettings').name]"
					},
					"location": {
						"value": "[parameters('location_1')]"
					}
				}
			}
		},
		{
			"apiVersion": "2018-02-01",
			"name": "PostDeploymentNotification",
			"type": "Microsoft.Resources/deployments",
			"dependsOn": [
				"vmssDeployLoop",
				"vnet-gateway-deploy"
			],
			"condition": "[variables('sendEmailNotification')]",
			"properties": {
				"mode": "Incremental",
				"templateLink": {
					"uri": "[variables('linkedUrls').vmssNotificationUrl]",
					"contentVersion": "1.0.0.0"
				},
				"parameters": {
					"vlVmssSettings": {
						"value": "[variables('vlVmssSettings')]"
					},
					"suffix": {
						"value": "[variables('suffixArray')[0]]"
					},
					"scriptReq": {
						"value": "[variables('scriptReqNotification')]"
					},
					"location": {
						"value": "[variables('locationArray')[0]]"
					},
					"emailAddress": {
						"value": "[parameters('emailAddress')]"
					},
					"admin_site": {
						"value": "[concat('http://',reference('network-resources-deploy').outputs.lbFqdnReg1.value)]"
					},
					"oms_portal_url": {
						"value": "[if(and(parameters('omsDeploy'), empty(parameters('omsWorkspaceId'))), reference('deployOMS').outputs.portalUrl.value, '')]"
					},
					"ethereum_rpc_endpoint": {
						"value": "[concat('http://',reference('network-resources-deploy').outputs.lbFqdnReg1.value, ':', variables('ethRpcPort'))]"
					},
					"consortium_data_URL": {
						"value": "[concat('http://',reference('network-resources-deploy').outputs.lbFqdnReg1.value)]"
					},
					"consortium_member_gateway_id_region1": {
						"value": "[if(variables('mustDeployVnetGateway'), resourceId('Microsoft.Network/virtualNetworkGateways', concat(variables('gatewaySettings').gatewayName, '-', variables('suffixArray')[0])), '')]"
					}
				}
			}
		}
	],
	"outputs": {
		"admin_site": {
			"type": "string",
			"value": "[concat('http://',reference('network-resources-deploy').outputs.lbFqdnReg1.value)]"
		},
		"oms_portal_url": {
			"type": "string",
			"value": "[if(and(parameters('omsDeploy'), empty(parameters('omsWorkspaceId'))), reference('deployOMS').outputs.portalUrl.value, 'OMS Portal not deployed')]"
		},
		"ethereum_rpc_endpoint": {
			"type": "string",
			"value": "[concat('http://',reference('network-resources-deploy').outputs.lbFqdnReg1.value, ':', variables('ethRpcPort'))]"
		},
		"ssh_to_first_vl_node_region1": {
			"type": "string",
			"value": "[concat('ssh -p ', variables('sshNATFrontEndStartingPort'), ' ', parameters('adminUsername'), '@', reference('network-resources-deploy').outputs.lbFqdnReg1.value)]"
		},
		"consortium_data_URL": {
			"type": "string",
			"value": "[concat('http://',reference('network-resources-deploy').outputs.lbFqdnReg1.value)]"
		},
		"consortium_member_gateway_id_region1": {
			"type": "string",
			"value": "[if(variables('mustDeployVnetGateway'), resourceId('Microsoft.Network/virtualNetworkGateways', concat(variables('gatewaySettings').gatewayName, '-', variables('suffixArray')[0])), 'NA')]"
		},
		"pair_Gateway_PS_Module": {
			"type": "string",
			"value": "[if(variables('mustDeployVnetGateway'), concat('http://',reference('network-resources-deploy').outputs.lbFqdnReg1.value,'/ConsortiumBridge.psm1'), 'NA')]"
		},
		"pair_Gateway_Azure_CLI_Script": {
			"type": "string",
			"value": "[if(variables('mustDeployVnetGateway'), concat('http://',reference('network-resources-deploy').outputs.lbFqdnReg1.value,'/ConsortiumBridge.sh'), 'NA')]"
		},
		"regionOneVnet": {
			"type": "string",
			"value": "[variables('vnetSettings')[0].vnetName]"
		}
	}
}