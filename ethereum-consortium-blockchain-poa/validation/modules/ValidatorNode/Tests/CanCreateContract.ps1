# Be sure to add a reference to this file in the head of ..\ValidatorNode.psm1
# 1. Contract can be created on the first node
# 2. Contract can be executed and returns a correct value on all nodes

################################################
############ Test Contract MathTest
################################################
<# 

pragma solidity ^0.4.9;
contract MathTest {
    function multiply(int a, int b) public view returns (int) {
        return a*b;
    }
}

#>
################################################
############ ByteCode for MathTest
################################################

<# 
608060405234801561001057600080fd5b5060c58061001f6000396000f300608060405260043610603f576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680633c4308a8146044575b600080fd5b348015604f57600080fd5b5060766004803603810190808035906020019092919080359060200190929190505050608c565b6040518082815260200191505060405180910390f35b60008183029050929150505600a165627a7a723058201b0f063a884df855cd416faa55c32bcd5ec340530db3b840c0e310cff9c1a4270029
#>

################################################
############ Abi for Mathtest
################################################
<#

[
	{
		"constant": true,
		"inputs": [
			{
				"name": "a",
				"type": "int256"
			},
			{
				"name": "b",
				"type": "int256"
			}
		],
		"name": "multiply",
		"outputs": [
			{
				"name": "",
				"type": "int256"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	}
]

#>

################################################
############ Function Hashes from contract
################################################
<# 
{
	"3c4308a8": "multiply(int256,int256)"
}
#>

function test-CanCreateContract {
    Param(
        [Parameter(Mandatory = $true)][System.Collections.ArrayList] $validatorNodeList,
        [Parameter(Mandatory = $true)][String] $prefundPhrase
    )
    
    Write-Host "Starting Test - Can Create Contract"
    $testNode = $validatorNodeList[0];
    Write-Host "  Initial Testing Node: ${testNode}"

    # Get Prefund account and Balance
    $prefundAccount = $testNode.AccountFromPhrase($prefundPhrase);
    Write-Host "  Prefund Account: ${prefundAccount}"

    # Byte code generated by using "https://remix.ethereum.org/" and copy/pasting the contract byte code from the contract at the start of this file
    $contractByteCode = "0x" + "608060405234801561001057600080fd5b5060c58061001f6000396000f300608060405260043610603f576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680633c4308a8146044575b600080fd5b348015604f57600080fd5b5060766004803603810190808035906020019092919080359060200190929190505050608c565b6040518082815260200191505060405180910390f35b60008183029050929150505600a165627a7a723058201b0f063a884df855cd416faa55c32bcd5ec340530db3b840c0e310cff9c1a4270029"

    # Deploy the Contract
    $parityMethod = "{`"method`":`"personal_sendTransaction`",`"params`":[{`"from`":`"$prefundAccount`",`"value`":`"0x0`",`"data`":`"${contractByteCode}`"},`"${prefundPhrase}`"],`"id`":1,`"jsonrpc`":`"2.0`"}"
    $deployContractTransactionHash = $testNode.ExecuteParityMethod($parityMethod)    
    Write-Host "  Contract Deployed. Transaction Hash: $deployContractTransactionHash"

    # Give transaction time to be mined
    $transactionReceipt = $testNode.GetMinedTransactionReceipt($deployContractTransactionHash)
    $contractAddress = $transactionReceipt.contractAddress
    Write-Host "  Transaction Mined at block #: $($transactionReceipt.blockNumberInt)"
    Write-Host "  Contract Address: $contractAddress"

    # Loop all nodes to see if they can use the contract
    #	"3c4308a8": "multiply(int256,int256)"
    $functionHash = "3c4308a8"    
    $firstMultiplier = 2;
    $secondMultiplier = 2;
    
    foreach ($eachNode in $validatorNodeList) {
        # Add first parameter
        $data = "0x" + $functionHash + ('{0:X64}' -f $firstMultiplier)
        #Add second parameter
        $data = $data + ('{0:X64}' -f $secondMultiplier)

        # Call the contract 
        $result = $eachNode.CallContract($prefundAccount, $contractAddress, $data)
        
        # Result should be a big integer value encoded as hex
        if (-not ($result.StartsWith("0x") -and $result.Length -eq 66)) {
            throw [System.Exception] "FAILURE - Contract did not return a numeric value. Node: $eachNode, Returned: $result"
        }

        # Translate the hex result value to a BigInt
        $resultAsBigInt = Get-BigIntegerFromHex($result)
        # Make sure the returned value is correct
        $expectedValue = [bigint]( $firstMultiplier * $secondMultiplier)
        if (-not $resultAsBigInt.Equals($expectedValue)) {
            throw [System.Exception] "FAILURE - Contract returned wrong value. Node: $eachNode, Returned: $resultAsBigInt, Expected: $expectedValue"
        }

        # Increment each time to make sure the contract is actually changing the value based on inputs
        $firstMultiplier = $firstMultiplier + 1
    }
    Write-Host "SUCCESS - Can create contract - Contract deployed on one node, and executable from all others"
    Write-Host "End Test - Can Create Contract"
}

Export-ModuleMember -Function test-CanCreateContract