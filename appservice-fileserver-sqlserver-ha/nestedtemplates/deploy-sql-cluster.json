{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "apiProfile": "2018-03-01-hybrid",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "namePrefix": {
      "type": "string",
      "minLength": 3,
      "maxLength": 8,
      "metadata": {
        "description": "Naming prefix for each new resource created. 3-char min, 8-char max, lowercase alphanumeric"
      }
    },
    "domainName": {
      "type": "string",
      "metadata": {
        "description": "DNS domain name for existing Active Directory domain"
      }
    },
    "adminUsername": {
      "type": "string",
      "metadata": {
        "description": "Name of the Administrator of the existing Active Directory Domain"
      }
    },
    "adminPassword": {
      "type": "securestring",
      "minLength": 12,
      "metadata": {
        "description": "Password for the Administrator account of the existing Active Directory Domain"
      }
    },
    "sqlServerServiceAccountUserName":{
      "type": "string"
    },
    "sqlServerServiceAccountPassword":{
      "type": "securestring"
    },
    "sqlLogin":{
      "type": "string"
    },
    "sqlLoginPassword":{
      "type": "securestring"
    },
    "SqlListenerIP":{
      "type": "string"
    },
    "nicSubnetUri": {
      "type": "string",
      "metadata": {
        "description": "Resource ID for existing vnet/subnet to which VM NICs should be attached"
      }
    },
    "vmSize": {
      "type": "string",
      "metadata": {
        "description": "Size of the S2D VMs to be created"
      }
    },
    "vmCount": {
      "type": "int",
      "minValue": 2,
      "maxValue": 3,
      "metadata": {
        "description": "Number of S2D VMs to be created in cluster (Min=2, Max=3)"
      }
    },
    "vmDiskSize": {
      "type": "int",
      "minValue": 128,
      "maxValue": 1023,
      "metadata": {
        "description": "Size of each data disk in GB on each S2D VM (Min=128, Max=1023)"
      }
    },
    "vmDiskCount": {
      "type": "int",
      "minValue": 1,
      "maxValue": 32,
      "metadata": {
        "description": "Number of data disks on each S2D VM (Min=2, Max=32). Ensure that the VM size you've selected will support this number of data disks."
      }
    },
    "imagePublisher": {
      "type": "string",
      "defaultValue": "MicrosoftSQLServer"
    },
    "imageOffer": {
      "type": "string",
      "defaultValue": "SQL2016SP2-WS2016"
    },
    "imageSKU": {
      "type": "string",
      "defaultValue": "Enterprise"
    },
    "imageVersion": {
      "type": "string",
      "defaultValue": "latest"
    },
    "artifactsLocation": {
      "type": "string"
    },
    "artifactsLocationSasToken": {
      "type": "string"
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Location for all resources."
      }
    }
  },
  "variables": {
    "apiVersionStorage": "2016-01-01",
    "witnessStorageName": "[concat(parameters('namePrefix'),uniqueString(resourceGroup().id),'sqlcw')]",
    "witnessStorageType": "Standard_LRS",
    "vmNamePrefix": "[concat(parameters('namePrefix'),'-sql-')]",
    "vmAvailabilitySetName": "[concat(variables('vmNamePrefix'),'as')]",
    "vmLoopTemplateURL": "[concat(parameters('artifactsLocation'),'/nestedtemplates/newVM.json',parameters('artifactsLocationSasToken'))]",
    "sqllbName":"[concat(parameters('namePrefix'),'-sql-lb')]",
    "sqlLBFE":"[concat(parameters('namePrefix'),'-sql-lbfe')]",
    "sqlLBBE":"[concat(parameters('namePrefix'),'-sql-lbbe')]",
    "SQLAOProbe":"[concat(parameters('namePrefix'),'-sql-probe')]",
    "SqlLBID":"[resourceId('Microsoft.Network/loadBalancers',variables('sqllbName'))]",
    "sqlLBBEID":"[concat(variables('SqlLBID'),'/backendAddressPools/',variables('sqlLBBE'))]",
    "sqllbFEConfigID":"[concat(variables('SqlLBID'),'/frontendIPConfigurations/',variables('sqlLBFE'))]",
    "sqllbProbeID":"[concat(variables('SqlLBID'),'/probes/',variables('SQLAOProbe'))]",
    "createClusterModulesURL":"[concat(parameters('artifactsLocation'),'/dsc/config-sql.ps1.zip',parameters('artifactsLocationSasToken'))]",
    "createClusterConfigurationFunction":"config-sql.ps1\\config-sql",
    "sqlAOPrepareModulesURL":"[concat(parameters('artifactsLocation'),'/dsc/prep-sql.ps1.zip',parameters('artifactsLocationSasToken'))]",
    "sqlAOPrepareConfigurationFunction":"prep-sql.ps1\\prep-sql",
    "sqlAOEPName":"aodns-hadr",
    "clusterName":"aodns-fc",
    "sqlAOAGName":"alwayson-ag",
    "sqlAOListenerName":"aon-listener-lensqlhademo",
    "sqlAOListenerPort":1433,
    "sqlLBIPAddress":"[parameters('SqlListenerIP')]",
    "adPDCVMName":"[concat(parameters('namePrefix'),'-ad-0')]"
  },
  "resources": [
    {
      "type": "Microsoft.Compute/availabilitySets",
      "name": "[variables('vmAvailabilitySetName')]",
      "location": "[parameters('location')]",
      "properties": {
        "platformUpdateDomainCount": "[parameters('vmCount')]",
        "platformFaultDomainCount": "[parameters('vmCount')]"
      },
      "sku": {
        "name": "Aligned"
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('witnessStorageName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "[variables('witnessStorageType')]"
      },
      "kind": "Storage"
    },
    {
      "name": "[variables('sqllbName')]",
      "type": "Microsoft.Network/loadBalancers",
      "location": "[parameters('location')]",
      "properties": {
        "frontendIPConfigurations": [
          {
            "name": "[variables('sqlLBFE')]",
            "properties": {
              "privateIPAllocationMethod": "Static",
              "privateIPAddress": "[variables('sqlLBIPAddress')]",
              "subnet": {
                "id": "[parameters('nicSubnetUri')]"
              }
            }
          }
        ],
        "backendAddressPools": [
          {
            "name": "[variables('sqlLBBE')]"
          }
        ],
        "loadBalancingRules": [
          {
            "name": "SQLAlwaysOnEndPointListener",
            "properties": {
              "backendAddressPool": {
                "id": "[variables('sqlLBBEID')]"
              },
              "frontendIPConfiguration": {
                "id": "[variables('sqllbFEConfigID')]"
              },
              "probe": {
                "id": "[variables('sqllbProbeID')]"
              },
              "protocol": "Tcp",
              "frontendPort": "[variables('sqlAOListenerPort')]",
              "backendPort":  "[variables('sqlAOListenerPort')]",
              "enableFloatingIP": true
            }
          }
        ],
        "probes": [
          {
            "name": "[variables('SQLAOProbe')]",
            "properties": {
              "protocol": "Tcp",
              "port": 59999,
              "intervalInSeconds": 5,
              "numberOfProbes": 2
            }
          }
        ]
      }
    },
    {
      "name": "[concat(variables('vmNamePrefix'), copyindex(), '-nic')]",
      "type": "Microsoft.Network/networkInterfaces",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[variables('sqllbName')]"
      ],
      "copy": {
        "name": "nicLoop",
        "count": "[parameters('vmCount')]"
      },
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[parameters('nicSubnetUri')]"
              },
              "loadBalancerBackendAddressPools": [
                {
                    "id": "[variables('sqlLBBEID')]"
                }
            ]
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "copy": {
        "name": "virtualMachineLoop",
        "count": "[parameters('vmCount')]"
      },
      "name": "[concat(variables('vmNamePrefix'),copyindex(),'-newVM')]",
      "dependsOn": [
        "nicLoop",
        "[resourceId('Microsoft.Compute/availabilitySets', variables('vmAvailabilitySetName'))]"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('vmLoopTemplateURL')]"
        },
        "parameters": {
          "vmName": {
            "value": "[concat(variables('vmNamePrefix'), copyindex())]"
          },
          "vmAvailabilitySetName": {
            "value": "[variables('vmAvailabilitySetName')]"
          },
          "vmSize": {
            "value": "[parameters('vmSize')]"
          },
          "vmDiskCount": {
            "value": "[parameters('vmDiskCount')]"
          },
          "vmDiskSize": {
            "value": "[parameters('vmDiskSize')]"
          },
          "adminUsername": {
            "value": "[parameters('adminUsername')]"
          },
          "adminPassword": {
            "value": "[parameters('adminPassword')]"
          },
          "artifactsLocation": {
            "value": "[parameters('artifactsLocation')]"
          },
          "artifactsLocationSasToken": {
            "value": "[parameters('artifactsLocationSasToken')]"
          },
          "imagePublisher": {
            "value": "[parameters('imagePublisher')]"
          },
          "imageOffer": {
            "value": "[parameters('imageOffer')]"
          },
          "imageSKU": {
            "value": "[parameters('imageSKU')]"
          },
          "imageVersion": {
            "value": "[parameters('imageVersion')]"
          }
        }
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(variables('vmNamePrefix'),copyindex(),'/SqlVmIaasExtension')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "virtualMachineLoop"
      ],
      "copy": {
        "name": "virtualMachineExtensionLoop",
        "count": "[parameters('vmCount')]"
      },
      "properties": {
        "type": "SqlIaaSAgent",
        "publisher": "Microsoft.SqlServer.Management",
        "typeHandlerVersion": "1.2",
        "autoUpgradeMinorVersion": "true",
        "settings": {
          "AutoTelemetrySettings": {
            "Region": "[parameters('location')]"
          },
          "AutoPatchingSettings": {
            "PatchCategory": "WindowsMandatoryUpdates",
            "Enable": true,
            "DayOfWeek": "Sunday",
            "MaintenanceWindowStartingHour": 2,
            "MaintenanceWindowDuration": "60"
          },
          "AutoBackupSettings": {
            "Enable": false,
            "RetentionPeriod": "30",
            "EnableEncryption": false
          }
        },
        "protectedSettings": {
          "SQLAuthUpdateUserName": "[parameters('sqlLogin')]",
          "SQLAuthUpdatePassword": "[parameters('sqlLoginPassword')]"
        }
      }
    },
    {  
      "type":"Microsoft.Compute/virtualMachines/extensions",
      "name":"[concat(variables('vmNamePrefix'),'0/sqlAOPrepare')]",
      "location":"[parameters('location')]",
      "dependsOn":[
        "virtualMachineExtensionLoop"
              ],
      "properties":{  
         "publisher":"Microsoft.Powershell",
         "type":"DSC",
         "typeHandlerVersion":"2.19",
         "autoUpgradeMinorVersion":true,
         "settings":{  
            "modulesURL":"[variables('sqlAOPrepareModulesURL')]",
            "configurationFunction":"[variables('sqlAOPrepareConfigurationFunction')]",
            "properties":{  
               "domainName":"[parameters('domainName')]",
               "sqlAlwaysOnEndpointName":"[variables('sqlAOEPName')]",
               "adminCreds":{  
                  "userName":"[parameters('adminUserName')]",
                  "password":"privateSettingsRef:AdminPassword"
               },
               "sqlServiceCreds":{  
                  "userName":"[parameters('sqlServerServiceAccountUserName')]",
                  "password":"privateSettingsRef:SqlServerServiceAccountPassword"
               },
               "NumberOfDisks":"[parameters('vmDiskCount')]",
               "WorkloadType":"GENERAL"
            }
         },
         "protectedSettings":{  
            "items":{  
               "adminPassword":"[parameters('adminPassword')]",
               "sqlServerServiceAccountPassword":"[parameters('sqlServerServiceAccountPassword')]"
            }
         }
      }
   },
   {  
    "type":"Microsoft.Compute/virtualMachines/extensions",
    "name":"[concat(variables('vmNamePrefix'),'1/configuringAlwaysOn')]",
    "location":"[parameters('location')]",
    "dependsOn": [
      "[resourceId('Microsoft.Compute/virtualMachines/extensions',  concat(variables('vmNamePrefix'),'0'), 'sqlAOPrepare')]"
    ],
    "properties":{  
       "publisher":"Microsoft.Powershell",
       "type":"DSC",
       "typeHandlerVersion":"2.19",
       "autoUpgradeMinorVersion":true,
       "settings":{  
          "modulesURL":"[variables('createClusterModulesURL')]",
          "configurationFunction":"[variables('createClusterConfigurationFunction')]",
          "properties":{  
             "domainName":"[parameters('domainName')]",
             "clusterName":"[variables('clusterName')]",
             "witnessStorageName": "[variables('witnessStorageName')]",
             "witnessStorageEndpoint": "[replace(split(reference(concat('Microsoft.Storage/storageAccounts/', variables('witnessStorageName'))).primaryEndpoints.blob, 'blob.')[1], '/', '')]",
             "witnessStorageKey": {
               "userName": "PLACEHOLDER-DO-NOT-USE",
               "password": "PrivateSettingsRef:witnessStorageKey"
             },             
             "nodes":[  
                "[concat(variables('vmNamePrefix'),'0')]",
                "[concat(variables('vmNamePrefix'),'1')]"
             ],
             "sqlAlwaysOnEndpointName":"[variables('sqlAOEPName')]",
             "sqlAlwaysOnAvailabilityGroupName":"[variables('sqlAOAGName')]",
             "sqlAlwaysOnAvailabilityGroupListenerName":"[variables('sqlAOListenerName')]",
             "SqlAlwaysOnAvailabilityGroupListenerPort":"[variables('sqlAOListenerPort')]",
             "databaseNames":"AutoHa-sample",
             "lbName":"[variables('sqlLBName')]",
             "lbAddress":"[variables('sqlLBIPAddress')]",
             "primaryReplica":"[concat(variables('vmNamePrefix'),'1')]",
             "secondaryReplica":"[concat(variables('vmNamePrefix'),'0')]",
             "dnsServerName":"[variables('adPDCVMName')]",
             "adminCreds":{  
                "userName":"[parameters('adminUserName')]",
                "password":"privateSettingsRef:adminPassword"
             },
             "sqlServiceCreds":{  
                "userName":"[parameters('sqlServerServiceAccountUserName')]",
                "password":"privateSettingsRef:sqlServerServiceAccountPassword"
             },
             "SQLAuthCreds":{  
                "userName":"sqlsa",
                "password":"privateSettingsRef:sqlAuthPassword"
             },
             "NumberOfDisks":"[parameters('vmDiskCount')]",
             "WorkloadType":"GENERAL"
          }
       },
       "protectedSettings":{  
          "items":{  
             "adminPassword":"[parameters('adminPassword')]",
             "sqlServerServiceAccountPassword":"[parameters('sqlServerServiceAccountPassword')]",
             "sqlAuthPassword":"[parameters('sqlServerServiceAccountPassword')]",
             "witnessStorageKey": "[listKeys(resourceId('Microsoft.Storage/storageAccounts',variables('witnessStorageName')),variables('apiVersionStorage')).keys[0].value]"

          }
       }
    }
 }
  ],
  "outputs": {}
}