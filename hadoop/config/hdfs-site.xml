<?xml version="1.0" encoding="UTF-8"?>
<configuration>
    <property>
        <description>
            The actual address the RPC server will bind to. If this optional address is set, it overrides only the
            hostname portion of dfs.namenode.rpc-address. It can also be specified per name node or name service for
            HA/Federation. This is useful for making the name node listen on all interfaces by setting it to 0.0.0.0.
        </description>
        <name>dfs.namenode.rpc-bind-host</name>
        <value>CLUSTER_NAMENameNode</value>
    </property>
    <property>
        <description>
            If true (the default), then the namenode requires that a connecting datanode's address must be resolved
            to a hostname. If necessary, a reverse DNS lookup is performed. All attempts to register a datanode from
            an unresolvable address are rejected. It is recommended that this setting be left on to prevent accidental
            registration of datanodes listed by hostname in the excludes file during a DNS outage. Only set this to
            false in environments where there is no infrastructure to support reverse DNS lookup.
        </description>
        <name>dfs.namenode.datanode.registration.ip-hostname-check</name>
        <value>false</value>
    </property>
    <property>
        <description>
            Specifies the maximum amount of bandwidth that each datanode can utilize for the balancing purpose in term
            of the number of bytes per second. You can use the following suffix (case insensitive): k(kilo), m(mega),
            g(giga), t(tera), p(peta), e(exa)to specify the size (such as 128k, 512m, 1g, etc.). Or provide complete
            size in bytes (such as 134217728 for 128 MB).
        </description>
        <name>dfs.datanode.balance.bandwidthPerSec</name>
        <value>100m</value>
    </property>
    <property>
        <description>
            Reserved space in bytes per volume. Always leave this much space free for non dfs use. Specific storage
            type based reservation is also supported. The property can be followed with corresponding storage types
            ([ssd]/[disk]/[archive]/[ram_disk]) for cluster with heterogeneous storage. For example, reserved space
            for RAM_DISK storage can be configured using property 'dfs.datanode.du.reserved.ram_disk'. If specific
            storage type reservation is not configured then dfs.datanode.du.reserved will be used.
        </description>
        <name>dfs.datanode.du.reserved</name>
        <value>0</value>
    </property>
    <property>
        <description>
            Minimum block size in bytes, enforced by the Namenode at create time. This prevents the accidental creation
            of files with tiny block sizes (and thus many blocks), which can degrade performance.
        </description>
        <name>dfs.namenode.fs-limits.min-block-size</name>
        <value>1048576</value>
    </property>
    <property>
        <description>
            Maximum number of blocks per file, enforced by the Namenode on write. This prevents the creation of
            extremely large files which can degrade performance.
        </description>
        <name>dfs.namenode.fs-limits.max-blocks-per-file</name>
        <value>1048576</value>
    </property>
    <property>
        <description>
            The NameNode periodically scans the namespace for LazyPersist files with missing blocks and unlinks them
            from the namespace. This configuration key controls the interval between successive scans. Set it to a
            negative value to disable this behavior.
        </description>
        <name>dfs.namenode.lazypersist.file.scrub.interval.sec</name>
        <value>300</value>
    </property>
    <property>
        <description>
            Default block replication. The actual number of replications can be specified when the file is created. The
            default is used if replication is not specified in create time.
        </description>
        <name>dfs.replication</name>
        <value>1</value>
        <final>true</final>
    </property>
    <property>
        <description>
            Minimal block replication.
        </description>
        <name>dfs.replication.min</name>
        <value>1</value>
        <final>true</final>
    </property>
    <property>
        <description>
            Maximal block replication.
        </description>
        <name>dfs.replication.max</name>
        <value>1</value>
        <final>true</final>
    </property>
    <property>
        <description>
            The default block size for new files, in bytes. You can use the following suffix (case insensitive):
            k(kilo), m(mega), g(giga), t(tera), p(peta), e(exa) to specify the size (such as 128k, 512m, 1g, etc.), Or
            provide complete size in bytes (such as 134217728 for 128 MB).
        </description>
        <name>dfs.blocksize</name>
        <value>256m</value>
    </property>
    <property>
        <description>
            Determines block reporting interval in milliseconds.
        </description>
        <name>dfs.blockreport.intervalMsec</name>
        <value>21600000</value>
    </property>
    <property>
        <description>
            Interval in seconds for Datanode to scan data directories and reconcile the difference between blocks
            in memory and on the disk.
        </description>
        <name>dfs.datanode.directoryscan.interval</name>
        <value>21600</value>
    </property>
    <property>
        <description>
            How many threads should the threadpool used to compile reports for volumes in parallel have.
        </description>
        <name>dfs.datanode.directoryscan.threads</name>
        <value>3</value>
    </property>
    <property>
        <description>
            The number of Namenode RPC server threads that listen to requests from clients. If
            dfs.namenode.servicerpc-address is not configured then Namenode RPC server threads listen to requests from
            all nodes.
        </description>
        <name>dfs.namenode.handler.count</name>
        <value>100</value>
    </property>
    <property>
        <description>
            The number of Namenode RPC server threads that listen to requests from DataNodes and from all other
            non-client nodes. dfs.namenode.service.handler.count will be valid only if dfs.namenode.servicerpc-address
            is configured.
        </description>
        <name>dfs.namenode.service.handler.count</name>
        <value>10</value>
    </property>
    <property>
        <description>
            Specifies the maximum amount of bandwidth that each datanode can utilize for the balancing purpose in term
            of the number of bytes per second. You can use the following suffix (case insensitive): k(kilo), m(mega),
            g(giga), t(tera), p(peta), e(exa)to specify the size (such as 128k, 512m, 1g, etc.). Or provide complete
            size in bytes (such as 134217728 for 128 MB).
        </description>
        <name>dfs.datanode.balance.bandwidthPerSec</name>
        <value>100m</value>
    </property>
    <property>
        <description>
            The size of buffer to stream files. The size of this buffer should probably be a multiple of hardware page
            size (4096 on Intel x86), and it determines how much data is buffered during read and write operations.
        </description>
        <name>dfs.stream-buffer-size</name>
        <value>4096</value>
    </property>
    <property>
        <description>
            The number of bytes per checksum. Must not be larger than dfs.stream-buffer-size
        </description>
        <name>dfs.bytes-per-checksum</name>
        <value>512</value>
    </property>
    <property>
        <description>
            Class representing block placement policy for non-striped files. There are four block placement policies
            currently being supported:

                BlockPlacementPolicyDefault,
                BlockPlacementPolicyWithNodeGroup,
                BlockPlacementPolicyRackFaultTolerant
                BlockPlacementPolicyWithUpgradeDomain.

            BlockPlacementPolicyDefault chooses the desired number of targets for placing block replicas in a default
            way.

            BlockPlacementPolicyWithNodeGroup places block replicas on environment with node-group layer.

            BlockPlacementPolicyRackFaultTolerant places the replicas to more racks.

            BlockPlacementPolicyWithUpgradeDomain places block replicas that honors upgrade domain policy.

            The details of placing replicas are documented in the javadoc of the corresponding policy classes. The
            default policy is BlockPlacementPolicyDefault, and the corresponding class is
            org.apache.hadoop.hdfs.server.blockmanagement.BlockPlacementPolicyDefault.
        </description>
        <name>dfs.block.replicator.classname</name>
        <value>org.apache.hadoop.hdfs.server.blockmanagement.AvailableSpaceBlockPlacementPolicy</value>
    </property>
</configuration>
