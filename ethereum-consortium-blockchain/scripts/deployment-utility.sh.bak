function setup_dependencies 
{
	################
	# Update modules
	################
	sudo apt-get -y update || exit 1;
	# To avoid intermittent issues with package DB staying locked when next apt-get runs
	sleep 5;

	##################
	# Install packages
	##################

	sudo apt-get -y install npm=3.5.2-0ubuntu4 git=1:2.7.4-0ubuntu1 software-properties-common || exit 1;
	sudo update-alternatives --install /usr/bin/node nodejs /usr/bin/nodejs 100 || exit 1;

	##############
	# Install geth
	##############
	wget https://gethstore.blob.core.windows.net/builds/geth-alltools-linux-amd64-1.6.0-facc47cb.tar.gz || exit 1;
	wget https://gethstore.blob.core.windows.net/builds/geth-alltools-linux-amd64-1.6.0-facc47cb.tar.gz.asc || exit 1;

	# Import geth buildserver keys
	gpg --recv-keys --keyserver hkp://keyserver.ubuntu.com F9585DE6 C2FF8BBF 9BA28146 7B9E2481 D2A67EAC || exit 1;

	# Validate signature
	gpg --verify geth-alltools-linux-amd64-1.6.0-facc47cb.tar.gz.asc || exit 1;

	# Unpack archive
	tar xzf geth-alltools-linux-amd64-1.6.0-facc47cb.tar.gz || exit 1;

	# /usr/bin is in $PATH by default, we'll put our binaries there
	sudo cp geth-alltools-linux-amd64-1.6.0-facc47cb/* /usr/bin/ || exit 1;
}

function setup_node_info
{
	declare -a NODE_IDS

	#############
	# Build node keys and node IDs
	#############
	for i in `seq 0 $(($NUM_BOOT_NODES - 1))`; do
		BOOT_NODE_HOSTNAME=$MN_NODE_PREFIX$i;
		NODE_KEYS[$i]=`echo $BOOT_NODE_HOSTNAME | sha256sum | cut -d ' ' -f 1`;
		setsid geth -nodekeyhex ${NODE_KEYS[$i]} > $HOMEDIR/tempbootnodeoutput 2>&1 &
		while sleep 10; do
			if [ -s $HOMEDIR/tempbootnodeoutput ]; then
				killall geth;
				NODE_IDS[$i]=`grep -Po '(?<=\/\/).*(?=@)' $HOMEDIR/tempbootnodeoutput`;
				rm $HOMEDIR/tempbootnodeoutput;
				if [ $? -ne 0 ]; then
					exit 1;
				fi
				break;
			fi
		done
	done

	##################################
	# Check for empty node keys or IDs
	##################################
	for nodekey in "${NODE_KEYS[@]}"; do
		if [ -z $nodekey ]; then
			exit 1;
		fi
	done
	for nodeid in "${NODE_IDS[@]}"; do
		if [ -z $nodeid ]; then
			exit 1;
		fi
	done
	
	##########################
	# Generate boot node URLs
	##########################
	for i in `seq 0 $(($NUM_BOOT_NODES - 1))`; do
		BOOTNODE_URLS="${BOOTNODE_URLS} --bootnodes enode://${NODE_IDS[$i]}@#${MN_NODE_PREFIX}${i}#:${GETH_IPC_PORT}";
	done
}

function setup_system_ethereum_account
{
	PASSWD_FILE="$GETH_HOME/passwd.info";
	printf %s $PASSWD > $PASSWD_FILE;

	PRIV_KEY=`echo "$PASSPHRASE" | sha256sum | sed s/-// | sed "s/ //"`;
	printf "%s" $PRIV_KEY > $HOMEDIR/priv_genesis.key;
	PREFUND_ADDRESS=`geth --datadir $GETH_HOME --password $PASSWD_FILE account import $HOMEDIR/priv_genesis.key | grep -oP '\{\K[^}]+'`;
	rm $HOMEDIR/priv_genesis.key;
	rm $PASSWD_FILE;
}

function initialize_geth
{
	####################
	# Initialize geth for private network
	####################
	if [ $NODE_TYPE -eq 1 ] && [ $MN_NODE_SEQNUM -lt $NUM_BOOT_NODES ]; then #Boot node logic
		printf %s ${NODE_KEYS[$MN_NODE_SEQNUM]} > $NODEKEY_SHARE_PATH;
	fi

	#################
	# Initialize geth
	#################

	# Clear out old chaindata
	rm -rf $GETH_HOME/geth/chaindata
	geth --datadir $GETH_HOME -verbosity 6 init $GENESIS_FILE_PATH >> $GETH_LOG_FILE_PATH 2>&1;
	if [ $? -ne 0 ]; then
		exit 1;
	fi
	echo "===== Completed geth initialization =====";
}

function setup_admin_website
{
	POWERSHELL_SHARE_PATH="$ETHERADMIN_HOME/public/ConsortiumBridge.psm1"
	CLI_SHARE_PATH="$ETHERADMIN_HOME/public/ConsortiumBridge.sh"

	#####################
	# Setup admin website
	#####################
	if [ $NODE_TYPE -eq 0 ]; then # TX nodes only
	  mkdir -p $ETHERADMIN_HOME/views/layouts;
	  cd $ETHERADMIN_HOME/views/layouts;
	  wget -N ${ARTIFACTS_URL_PREFIX}/scripts/etheradmin/main.handlebars || exit 1;
	  cd $ETHERADMIN_HOME/views;
	  wget -N ${ARTIFACTS_URL_PREFIX}/scripts/etheradmin/etheradmin.handlebars || exit 1;
	  wget -N ${ARTIFACTS_URL_PREFIX}/scripts/etheradmin/etherstartup.handlebars || exit 1;
	  cd $ETHERADMIN_HOME;
	  wget -N ${ARTIFACTS_URL_PREFIX}/scripts/etheradmin/package.json || exit 1;
	  wget -N ${ARTIFACTS_URL_PREFIX}/scripts/etheradmin/npm-shrinkwrap.json || exit 1;
	  npm install || exit 1;
	  wget -N ${ARTIFACTS_URL_PREFIX}/scripts/etheradmin/app.js || exit 1;
	  mkdir $ETHERADMIN_HOME/public;
	  cd $ETHERADMIN_HOME/public;
	  wget -N ${ARTIFACTS_URL_PREFIX}/scripts/etheradmin/skeleton.css || exit 1;

	  # Make consortium data available to joining members
	  cp $GENESIS_FILE_PATH $ETHERADMIN_HOME/public;
	  printf "%s" $NETWORK_ID > $NETWORKID_SHARE_PATH;

	  # Copy the powershell script to admin site
	  wget -N ${ARTIFACTS_URL_PREFIX}/powershell/ConsortiumBridge.psm1 -O ${POWERSHELL_SHARE_PATH} || exit 1;
	  wget -N ${ARTIFACTS_URL_PREFIX}/scripts/ConsortiumBridge.sh -O ${CLI_SHARE_PATH} || exit 1;
	fi
}

function create_config
{
	##################
	# Create conf file
	##################
	printf "%s\n" "HOMEDIR=$HOMEDIR" > $GETH_CFG_FILE_PATH;
	printf "%s\n" "IDENTITY=$VMNAME" >> $GETH_CFG_FILE_PATH;
	printf "%s\n" "NETWORK_ID=$NETWORK_ID" >> $GETH_CFG_FILE_PATH;
	printf "%s\n" "MAX_PEERS=$MAX_PEERS" >> $GETH_CFG_FILE_PATH;
	printf "%s\n" "NODE_TYPE=$NODE_TYPE" >> $GETH_CFG_FILE_PATH;
	printf "%s\n" "BOOTNODE_URLS=\"$BOOTNODE_URLS\"" >> $GETH_CFG_FILE_PATH;
	printf "%s\n" "MN_NODE_PREFIX=$MN_NODE_PREFIX" >> $GETH_CFG_FILE_PATH;
	printf "%s\n" "NUM_BOOT_NODES=$NUM_BOOT_NODES" >> $GETH_CFG_FILE_PATH;
	printf "%s\n" "MINER_THREADS=$MINER_THREADS" >> $GETH_CFG_FILE_PATH;
	printf "%s\n" "GETH_HOME=$GETH_HOME" >> $GETH_CFG_FILE_PATH;
	printf "%s\n" "GETH_LOG_FILE_PATH=$GETH_LOG_FILE_PATH" >> $GETH_CFG_FILE_PATH;

	if [ $NODE_TYPE -eq 0 ]; then #TX node
	  printf "%s\n" "ETHERADMIN_HOME=$ETHERADMIN_HOME" >> $GETH_CFG_FILE_PATH;
	  printf "%s\n" "PREFUND_ADDRESS=$PREFUND_ADDRESS" >> $GETH_CFG_FILE_PATH;
	  printf "%s\n" "NUM_MN_NODES=$NUM_MN_NODES" >> $GETH_CFG_FILE_PATH;
	  printf "%s\n" "TX_NODE_PREFIX=$TX_NODE_PREFIX" >> $GETH_CFG_FILE_PATH;
	  printf "%s\n" "NUM_TX_NODES=$NUM_TX_NODES" >> $GETH_CFG_FILE_PATH;
	  printf "%s\n" "ADMIN_SITE_PORT=$ADMIN_SITE_PORT" >> $GETH_CFG_FILE_PATH;
	  printf "%s\n" "BOOTNODE_SHARE_PATH=$BOOTNODE_SHARE_PATH" >> $GETH_CFG_FILE_PATH;
	  printf "%s\n" "CONSORTIUM_MEMBER_ID=$CONSORTIUM_MEMBER_ID" >> $GETH_CFG_FILE_PATH;
	fi
}

function setup_rc_local
{
	##########################################
	# Setup rc.local for service start on boot
	##########################################
	echo -e '#!/bin/bash' "\nsudo -u $AZUREUSER /bin/bash $HOMEDIR/start-private-blockchain.sh $GETH_CFG_FILE_PATH $PASSWD \"\"" | sudo tee /etc/rc.local 2>&1 1>/dev/null
	if [ $? -ne 0 ]; then
		exit 1;
	fi
}